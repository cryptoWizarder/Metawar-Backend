generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      LogType
  scope     String
  message   String
  level     Int
  uid       String?  @db.ObjectId
  sid       String?  @db.ObjectId
  user      User?    @relation(fields: [uid], references: [id])
  session   Session? @relation(fields: [sid], references: [id])
  meta      Json?
  createdAt DateTime @default(now())

  @@map("logs")
}

enum LogType {
  ERROR
  WARNING
  INFO
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  firstname       String     @default("")
  lastname        String     @default("")
  surname         String     @default("")
  picture         String     @default("https://cdn.kiraverse.game/static/paramlabs-logo.png")
  eos_pu_id       String?
  email           String     @unique()
  password        String
  active          Boolean    @default(true)
  roles           UserRole[] @default([USER])
  wallet_provider String?
  wallet_network  String?
  wallet_address  String?
  updatedAt       DateTime   @updatedAt
  createdAt       DateTime   @default(now())
  sessions        Session[]
  nonces          Nonce[]
  Log             Log[]
  App             App[]
  newsletter      Boolean?

  @@map("users")
}

model Code {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  email          String
  code           String
  nb_tries       Int            @default(0)
  last_try_at    DateTime?
  nb_resends     Int            @default(0)
  last_resend_at DateTime
  meta           Json?
  type           VerifyCodeType @default(VALIDATE_EMAIL)
  updatedAt      DateTime       @updatedAt
  createdAt      DateTime       @default(now())

  @@unique([email, type])
  @@map("codes")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @db.ObjectId
  user      User     @relation(fields: [uid], references: [id], onDelete: Cascade, onUpdate: Restrict)
  desc      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  Log       Log[]
  meta      Json?

  @@map("sessions")
}

model App {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?  @default("")
  secret      String
  access      String[] @default([])
  uid         String   @db.ObjectId
  user        User     @relation(fields: [uid], references: [id], onDelete: Cascade, onUpdate: Restrict)
  icon        String   @default("https://cdn.kiraverse.game/static/paramlabs-logo.png")
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  alg         String   @default("sha256")

  @@map("apps")
}

model Nonce {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String   @db.ObjectId
  user      User     @relation(fields: [uid], references: [id], onDelete: Cascade, onUpdate: Restrict)
  nonce     String
  message   String
  desc      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("nonces")
}

model Asset {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  iid         String
  url         String
  name        String
  description String?
  owner       String
  image       String
  colId       String          @db.ObjectId
  address     String
  meta        Json?
  collection  AssetCollection @relation(fields: [colId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  updatedAt   DateTime
  createdAt   DateTime

  @@unique([iid, colId])
  @@map("assets")
}

model NFT {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  tokenAddress String
  nftData      String?
  nftId        String?
  minter       String?
  active       Boolean

  @@unique([tokenAddress, nftId, minter])
  @@map("nfts")
}

model AssetCollection {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  iid     String      @unique()
  address String
  name    String      @default("")
  slug    String?
  img_url String
  type    AssetSource @default(IMX)
  Asset   Asset[]
  meta    Json?

  @@map("asset_collections")
}

enum AssetSource {
  IMX
  OPENSEA
  GAMESTOP
}

enum VerifyCodeType {
  VALIDATE_EMAIL
  FORGOT_PASSWORD
}

enum UserRole {
  USER
  ADMIN
  Asset
}
